diff --git a/src/stream/ngx_stream_upstream_hash_module.c b/src/stream/ngx_stream_upstream_hash_module.c
index b764fcbe0..dce654f4d 100644
--- a/src/stream/ngx_stream_upstream_hash_module.c
+++ b/src/stream/ngx_stream_upstream_hash_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_stream.h>
 
+#if (NGX_STREAM_UPSTREAM_CHECK)
+#include "ngx_stream_upstream_check_module.h"
+#endif
 
 typedef struct {
     uint32_t                              hash;
@@ -237,6 +240,16 @@ ngx_stream_upstream_get_hash_peer(ngx_peer_connection_t *pc, void *data)
             goto next;
         }
 
+    #if (NGX_STREAM_UPSTREAM_CHECK)
+        ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
+                       "get hash peer, check_index: %ui",
+                       peer->check_index);
+
+        if (ngx_stream_upstream_check_peer_down(peer->check_index)) {
+            goto next;
+        }
+    #endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
@@ -557,6 +570,16 @@ ngx_stream_upstream_get_chash_peer(ngx_peer_connection_t *pc, void *data)
                 continue;
             }
 
+        #if (NGX_STREAM_UPSTREAM_CHECK)
+            ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
+                           "get consistent hash peer, check_index: %ui",
+                           peer->check_index);
+
+            if (ngx_stream_upstream_check_peer_down(peer->check_index)) {
+                continue;
+            }
+        #endif
+
             if (peer->max_conns && peer->conns >= peer->max_conns) {
                 continue;
             }
diff --git a/src/stream/ngx_stream_upstream_least_conn_module.c b/src/stream/ngx_stream_upstream_least_conn_module.c
index 739b20a9f..c67768746 100644
--- a/src/stream/ngx_stream_upstream_least_conn_module.c
+++ b/src/stream/ngx_stream_upstream_least_conn_module.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_stream.h>
 
+#if (NGX_STREAM_UPSTREAM_CHECK)
+#include "ngx_stream_upstream_check_module.h"
+#endif
 
 static ngx_int_t ngx_stream_upstream_init_least_conn_peer(
     ngx_stream_session_t *s, ngx_stream_upstream_srv_conf_t *us);
@@ -143,6 +146,16 @@ ngx_stream_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
             continue;
         }
 
+    #if (NGX_STREAM_UPSTREAM_CHECK)
+        ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
+                       "get least_conn peer, check_index: %ui",
+                       peer->check_index);
+
+        if (ngx_stream_upstream_check_peer_down(peer->check_index)) {
+            continue;
+        }
+    #endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
@@ -198,6 +211,16 @@ ngx_stream_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
                 continue;
             }
 
+        #if (NGX_STREAM_UPSTREAM_CHECK)
+            ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
+                           "get least_conn peer, check_index: %ui",
+                           peer->check_index);
+
+            if (ngx_stream_upstream_check_peer_down(peer->check_index)) {
+                continue;
+            }
+        #endif
+
             if (peer->conns * best->weight != best->conns * peer->weight) {
                 continue;
             }
diff --git a/src/stream/ngx_stream_upstream_round_robin.c b/src/stream/ngx_stream_upstream_round_robin.c
index ae3bf37a6..32c3f8b2a 100644
--- a/src/stream/ngx_stream_upstream_round_robin.c
+++ b/src/stream/ngx_stream_upstream_round_robin.c
@@ -9,6 +9,9 @@
 #include <ngx_core.h>
 #include <ngx_stream.h>
 
+#if (NGX_STREAM_UPSTREAM_CHECK)
+#include "ngx_stream_upstream_check_module.h"
+#endif
 
 #define ngx_stream_upstream_tries(p) ((p)->tries                              \
                                       + ((p)->next ? (p)->next->tries : 0))
@@ -110,6 +113,15 @@ ngx_stream_upstream_init_round_robin(ngx_conf_t *cf,
                 peer[n].down = server[i].down;
                 peer[n].server = server[i].name;
 
+            #if (NGX_STREAM_UPSTREAM_CHECK)
+                if (!server[i].down) {
+                    peer[n].check_index =
+                        ngx_stream_upstream_check_add_peer(cf, us, &server[i].addrs[j]);
+                } else {
+                    peer[n].check_index = (ngx_uint_t) NGX_ERROR;
+                }
+            #endif
+
                 *peerp = &peer[n];
                 peerp = &peer[n].next;
                 n++;
@@ -180,6 +192,15 @@ ngx_stream_upstream_init_round_robin(ngx_conf_t *cf,
                 peer[n].down = server[i].down;
                 peer[n].server = server[i].name;
 
+            #if (NGX_STREAM_UPSTREAM_CHECK)
+                if (!server[i].down) {
+                    peer[n].check_index =
+                        ngx_stream_upstream_check_add_peer(cf, us, &server[i].addrs[j]);
+                } else {
+                    peer[n].check_index = (ngx_uint_t) NGX_ERROR;
+                }
+            #endif
+
                 *peerp = &peer[n];
                 peerp = &peer[n].next;
                 n++;
@@ -247,6 +268,11 @@ ngx_stream_upstream_init_round_robin(ngx_conf_t *cf,
         peer[i].max_conns = 0;
         peer[i].max_fails = 1;
         peer[i].fail_timeout = 10;
+    #if (NGX_STREAM_UPSTREAM_CHECK)
+        peer[i].check_index = (ngx_uint_t) NGX_ERROR;
+    #endif
+
         *peerp = &peer[i];
         peerp = &peer[i].next;
     }
@@ -368,6 +394,11 @@ ngx_stream_upstream_create_round_robin_peer(ngx_stream_session_t *s,
         peer[0].max_conns = 0;
         peer[0].max_fails = 1;
         peer[0].fail_timeout = 10;
+    #if (NGX_STREAM_UPSTREAM_CHECK)
+        peer[0].check_index = (ngx_uint_t) NGX_ERROR;
+    #endif
+
         peers->peer = peer;
 
     } else {
@@ -402,6 +433,11 @@ ngx_stream_upstream_create_round_robin_peer(ngx_stream_session_t *s,
             peer[i].max_conns = 0;
             peer[i].max_fails = 1;
             peer[i].fail_timeout = 10;
+        #if (NGX_STREAM_UPSTREAM_CHECK)
+            peer[i].check_index = (ngx_uint_t) NGX_ERROR;
+        #endif
+
             *peerp = &peer[i];
             peerp = &peer[i].next;
         }
@@ -462,6 +498,12 @@ ngx_stream_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
             goto failed;
         }
 
+    #if (NGX_STREAM_UPSTREAM_CHECK)
+        if (ngx_stream_upstream_check_peer_down(peer->check_index)) {
+            goto failed;
+        }
+    #endif
+
         if (peer->max_conns && peer->conns >= peer->max_conns) {
             goto failed;
         }
@@ -560,6 +602,12 @@ ngx_stream_upstream_get_peer(ngx_stream_upstream_rr_peer_data_t *rrp)
             continue;
         }
 
+    #if (NGX_STREAM_UPSTREAM_CHECK)
+        if (ngx_stream_upstream_check_peer_down(peer->check_index)) {
+            continue;
+        }
+    #endif
+
         if (peer->max_fails
             && peer->fails >= peer->max_fails
             && now - peer->checked <= peer->fail_timeout)
diff --git a/src/stream/ngx_stream_upstream_round_robin.h b/src/stream/ngx_stream_upstream_round_robin.h
index bd96667ba..8baca5dd9 100644
--- a/src/stream/ngx_stream_upstream_round_robin.h
+++ b/src/stream/ngx_stream_upstream_round_robin.h
@@ -35,6 +35,11 @@ struct ngx_stream_upstream_rr_peer_s {
 
     ngx_uint_t                       max_fails;
     time_t                           fail_timeout;
+#if (NGX_STREAM_UPSTREAM_CHECK)
+    ngx_uint_t                       check_index;
+#endif
+
     ngx_msec_t                       slow_start;
     ngx_msec_t                       start_time;
 
